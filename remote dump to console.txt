-- Created by Nilla; currently inoperable
-- Credits to intriga for the remotespy info and Autumn's original script.
-- Gets all remotes available and dumps them to console. write
getgenv()["copystr"] = getgenv()["setclipboard"]
getgenv()["changereadonly"] = getgenv()["make_writeable"]
getgenv()["getscriptfunc"] = getgenv()["get_script_function"]
getgenv()["dumpfunc"] = getgenv()["dump_function"]
getgenv()["bctolua"] = getgenv()["bytecode_to_lua"]
getgenv()["writeconsole"] = getgenv()["console_print"]

for i,v in pairs(getgenv()) do
v = function(obj)
local fix = getscriptfunc(obj)
local byte = dumpfunc(fix)
return (bctolua(bytes))
end
end

local enabled = {
  BindableEvent = false;
  BindableFunction = false;
  RemoteEvent = true;
  RemoteFunction = true;
}

local ignore = {
GetSetting = true;
GetSelection = true;
SelectionChanged = true;
GetAwaiting = true;
}

local meta,oldmeta = getrawmetatable(game),{}
make_writeable(meta, true)
for i,v in next,meta do oldmeta[i] = v end
function formatargs(args,showkeys)
  if #args == 0 then return "N/A" end
  local strargs = {}
  for k,v in next,args do
      local argstr = ""
      if type(v) == "string" then
          argstr = "\"" .. v .. "\""
  elseif typeof(v) == "Instance" then
  argstr = "game."..v:GetFullName()
      elseif type(v) == "table" then
          argstr = "{" .. formatargs(v,true) .. "}"
      else
          argstr = tostring(v)
      end
      if showkeys and type(k) ~= "number" then
          table.insert(strargs,k.."="..argstr)
      else
          table.insert(strargs,argstr)
      end
  end
  return table.concat(strargs, ", ")
end
local realmethods = {}
realmethods.Fire = Instance.new("BindableEvent").Fire
realmethods.Invoke = Instance.new("BindableFunction").Invoke
realmethods.FireServer = Instance.new("RemoteEvent").FireServer
realmethods.InvokeServer = Instance.new("RemoteFunction").InvokeServer
local tables = ""
meta.__index = function(t,k)
  if (k == "Fire" or k == "Invoke" or k == "FireServer" or k == "InvokeServer") and (enabled[t.ClassName] and not ignore[t.Name]) then
      return function(self,...)
          local args = {...}
          local ret = {realmethods[k](self,...)}
          warn(t.ClassName.." called!\nPath: game."..t:GetFullName().."\n".."Arguments: "..formatargs(args).."\nReturn: "..formatargs(ret).."\nRuns As: ".."game."..t:GetFullName()..":"..k.."("..formatargs(args)..")")
  tables = tables..(t.ClassName.." called!\nPath: ".."game."..t:GetFullName().."\n".."Args: "..formatargs(args).."\nReturn: "..formatargs(ret).."\nRuns As: ".."game."..t:GetFullName()..":"..k.."("..formatargs(args)..")\n")
  setclipboard(tables)
return unpack(ret)
      end
  else
      return oldmeta.__index(t,k)
  end
end









